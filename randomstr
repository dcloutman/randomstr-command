#! /usr/bin/env python3

import sys
from os import path
import click
from secrets import randbelow


ARG_COUNT = len(sys.argv)
DEFAULT_RAND_STR_LEN = 24
DEFAULT_DISALLOW_LIST = ['"', "'", '`', '$', '\\', '<']
NULL_DISALLOW_LIST = []
MAX_RAND_STR_LEN = 65536
MAX_DIVERSE_STRING_ATTEMPTS = 2048

"""
`randomstr` Help:
Generates a random string in the lower ASCII range of 33-126. Default length is 24 characters.

Usage: randomstr [str_len] [--no <string of disallowed characters>]

Characters disallowed by default are: {DEFAULT_DISALLOW_LIST}
"""

@click.command()
@click.argument("rand_str_len", default=DEFAULT_RAND_STR_LEN)
@click.option("--min-length", "-n", default=24, help=f"Minimum length of the generated string. Defaults to {DEFAULT_RAND_STR_LEN}.")
@click.option("--max-length", "-x", default=24, help=f"Maximum length of the generated string. Defaults to {DEFAULT_RAND_STR_LEN}.")
@click.option("--allow", "-w", default=None, help=f"A string of allowed characters that will be applied after all restrictions are applied.")
@click.option("--enforce-diversity", "-d", is_flag=True, default=False, help="Generates a ramdom string that has a lower case letter, an upper case letter, a number, and a non alpha-numeric character.")
@click.option("--no", default=DEFAULT_DISALLOW_LIST, help="Overrides the default list of disallowed characters. Pass an empty argument to use all available characters.")
@click.option("--also-no", default="", help="Adds characters to the disallow list without overwriting the existing disallow list. Useful for when characters need to be added to the default disallow list.")
@click.option("--also-no-special", "-s", is_flag=True, default=False, help="Exclude all special characters.")
@click.option("--also-no-numeric", "-m", is_flag=True, default=False, help="Exclude all numeric characters.")
@click.option("--also-no-alpha", "-a", is_flag=True, default=False, help="Exclude all alphabet of both cases characters.")
@click.option("--also-no-lower", "-l", is_flag=True, default=False, help="Exclude all lower case alphabet characters.")
@click.option("--also-no-upper", "-u", is_flag=True, default=False, help="Exclude all upper case alphabet characters.")
@click.option("--ruler", is_flag=True, default=False, help="Display a visual guide illustrating minimum and maximum lengths above the generated string.")
def randomstr(rand_str_len, min_length, max_length, allow, enforce_diversity, no, also_no, also_no_special, also_no_numeric, also_no_alpha, also_no_lower, also_no_upper, ruler):
    if also_no_alpha:
        also_no_lower = True
        also_no_upper = True

    if also_no_special and also_no_lower and also_no_upper and also_no_numeric:
        print(f"All characters are excluded. Cannot generate string.")
        exit(1)        

    if (enforce_diversity and rand_str_len < 4) or min_length < 4 or max_length < 4:
        print(f"The minimum string length for diversified strings is 4.")
        exit(1)
    elif rand_str_len < 1:
        print(f"The minimum string length is 1.")
        exit(1)
    if min_length != DEFAULT_RAND_STR_LEN or max_length != DEFAULT_RAND_STR_LEN:
        if min_length > max_length:
            print("The minimum string length must be less than or equal to maximum string length.")
            exit(1)
        else:
            rand_str_len = randbelow((max_length - min_length) + 1) + min_length
            if ruler:
                print_ruler(min_length, max_length)
    else:
        if ruler:
            print_ruler(rand_str_len, rand_str_len)

    # Catch excessive string lengths to avoid abuse of the utility.
    if rand_str_len > MAX_RAND_STR_LEN:
        print(f"The maximum allowed string length is {MAX_RAND_STR_LEN} characters.")
        exit(1)
    
    if also_no_special:
        also_no += gen_special_chr_str()

    if also_no_numeric:
        also_no += gen_numeric_chr_str()

    if also_no_lower:
        also_no += gen_lower_chr_str()

    if also_no_upper:
        also_no += gen_upper_chr_str()

    disallow_list = str_to_unique_char_list(no + also_no)

    if enforce_diversity:
        print(gen_random_diverse_str(rand_str_len, disallow_list, no_special=also_no_special, no_lower=also_no_lower, no_upper=also_no_upper, no_numeric=also_no_numeric))
    else:
        print(gen_random_str(rand_str_len, disallow_list))

    exit(0)


def str_to_unique_char_list(string):
    """
    Takes an array and converts it into a string of unique characters.
    """
    return ''.join(set(string))  # Casting string to set de-dupes the characters.


def gen_random_str(rand_str_len, disallow_list):
    """
    Generates the ramdom string.
    """
    output = ''
    i = 0
    while i < rand_str_len:
        ascii_val = randbelow(94) + 33

        # This should never happen, but if it does, fail noticably.
        if ascii_val > 126 or ascii_val < 33:
            raise Exception('Generated ASCII value out of range of acceptable characters.')
            exit(1)

        newchar = chr(ascii_val)
        if not newchar in disallow_list:
            output = output + newchar
            i += 1
    return output


def gen_random_diverse_str(rand_str_len, disallow_list, no_special = False, no_upper = False, no_lower = False, no_numeric = False):
    """
    By default, generates a ramdom string that has a lower case letter, an upper case letter, a number, and a non alpha-numeric character.
    """
    attempts = 0
    while attempts < MAX_DIVERSE_STRING_ATTEMPTS:
        output = ''
        i = 0

        """
        These values are False by default but assigning the parameter values ensures that disallowed characters will not be generated.
        """
        has_number = no_numeric
        has_lower = no_lower
        has_upper = no_upper
        has_special = no_special

        while i < rand_str_len:
            ascii_val = randbelow(94) + 33

            # This should never happen, but if it does, fail noticably.
            if ascii_val > 126 or ascii_val < 33:
                raise Exception('Generated ASCII value out of range of acceptable characters.')
                exit(1)

            newchar = chr(ascii_val)
            if not newchar in disallow_list:
                output = output + newchar
                i += 1

                if ascii_val >= 65 and ascii_val <= 90:
                    has_upper = True
                elif ascii_val >= 97 and ascii_val <= 122:
                    has_lower = True                
                elif ascii_val >= 48 and ascii_val <= 57:
                    has_number = True
                else:
                    has_special = True

        if has_lower and has_upper and has_number and has_special:
            return shuffle_string(output)
    # end while


    print("The application failed to generate a diverse password. Verify that your disallow list is not too restrictive and try again.")
    exit(1) 

def shuffle_string(target_string):
    """
    Returns a string with the contents of target_string in a random order.
    """
    target_list = list(target_string)
    result = ""
    target_list_len = len(target_list)
    while target_list_len > 0:
        random_index = randbelow(target_list_len)
        result = result + target_list[random_index]
        target_list.pop(random_index)
        target_list_len = len(target_list)
    
    return result



def print_ruler(min_length, max_length):
    """
    Outputs a visual display illustrating the allowed string length. Useful for debugging.
    """
    print(('-' * (min_length - 1)) + ('=' * ((max_length - min_length) + 1)))


def gen_chr_sequence_str (first, last, separator=''):
    """
    Generates an ordered string of ASCII characters. first and last are inclusive.
    """
    return separator.join([chr(i) for i in range(first, (last + 1))])

def gen_special_chr_str ():
    """
    Generates a string of all special characters (non-whitespace, non-alphanumeric) in the lower ASCII range.
    """
    return gen_chr_sequence_str(33, 47) + gen_chr_sequence_str(58, 64) + gen_chr_sequence_str(91, 96) +gen_chr_sequence_str(123, 126)

def gen_numeric_chr_str ():
    """
    Generates a string of all numeric characters.
    """
    return gen_chr_sequence_str(48, 57)

def gen_lower_chr_str ():
    """
    Generates a string of all lower case letters.
    """
    return gen_chr_sequence_str(97, 122)

def gen_upper_chr_str ():
    """
    Generates a string of all upper case letters.
    """
    return gen_chr_sequence_str(65, 90)

# Start procedural code
if __name__ == '__main__':
    randomstr()
  
