#! /usr/bin/env python3
import click
from lib import rand_below, str_to_unique_char_list, gen_special_chr_str, gen_numeric_chr_str, gen_lower_chr_str, gen_upper_chr_str, shuffle_string, gen_random_diverse_str, gen_random_str

DEFAULT_RAND_STR_LEN = 24
DEFAULT_DISALLOW_LIST = ['"', "'", '`', '$', '\\', '<', '{']
"""These characters are often disallowed from passwords in an attempt to prevent injection attacks."""
MAX_RAND_STR_LEN = 65536

@click.command()
@click.argument("rand_str_len", default=DEFAULT_RAND_STR_LEN)
@click.option("--min-length", "-n", default=24, help=f"Minimum length of the generated string. Defaults to {DEFAULT_RAND_STR_LEN}.")
@click.option("--max-length", "-x", default=24, help=f"Maximum length of the generated string. Defaults to {DEFAULT_RAND_STR_LEN}.")
@click.option("--allow", "-w", default=None, help=f"A string of allowed characters that will be applied after all restrictions are applied.")
@click.option("--enforce-diversity", "-d", default=False, is_flag=True, help="Generates a ramdom string that has a lower case letter, an upper case letter, a number, and a non alpha-numeric character.")
@click.option("--diversify-from-allow", "-D", default=False, is_flag=True, help="When used with --enforce-diversity, the string will includ at least one of the characters listed in `--allow`.")
@click.option("--no", default=DEFAULT_DISALLOW_LIST, help="Overrides the default list of disallowed characters. Pass an empty argument to use all available characters.")
@click.option("--also-no", default="", help="Adds characters to the disallow list without overwriting the existing disallow list. Useful for when characters need to be added to the default disallow list.")
@click.option("--also-no-special", "-s", is_flag=True, default=False, help="Exclude all special characters.")
@click.option("--also-no-numeric", "-m", is_flag=True, default=False, help="Exclude all numeric characters.")
@click.option("--also-no-alpha", "-a", is_flag=True, default=False, help="Exclude all alphabet of both cases characters.")
@click.option("--also-no-lower", "-l", is_flag=True, default=False, help="Exclude all lower case alphabet characters.")
@click.option("--also-no-upper", "-u", is_flag=True, default=False, help="Exclude all upper case alphabet characters.")
@click.option("--ruler", is_flag=True, default=False, help="Display a visual guide illustrating minimum and maximum lengths above the generated string.")
@click.option("--silent", is_flag=True, default=False, help="Suppress warnings and non-essential output.")
def randomstr(rand_str_len, min_length, max_length, allow, enforce_diversity, diversify_from_allow, no, also_no, also_no_special, also_no_numeric, also_no_alpha, also_no_lower, also_no_upper, ruler, silent):
    """Generates a random string in the lower ASCII range of 33-126. Default length is 24 characters. The following characters are disallowed by default: " ' ` $ \\ < {"""
    if also_no_alpha:
        also_no_lower = True
        also_no_upper = True

    min_diverse_str_len = 4
    if also_no_special:
        min_diverse_str_len -= 1
    if also_no_numeric:
        min_diverse_str_len -= 1
    if also_no_lower:
        min_diverse_str_len -= 1
    if also_no_upper:
        min_diverse_str_len -= 1
    if allow and diversify_from_allow:
        min_diverse_str_len += 1

    if also_no_special and also_no_lower and also_no_upper and also_no_numeric and allow is None:
        print(f"All characters are excluded. Cannot generate string.")
        exit(1)

    if(min_length < 1 or max_length < 1):
        print("Random strings must be at least one character long.")
        exit(1)

    if (enforce_diversity and rand_str_len < min_diverse_str_len):
        print(f"The minimum string length for diversified strings is {min_diverse_str_len}.")
        exit(1)

    if rand_str_len < 1:
        print(f"The minimum string length is 1.")
        exit(1)

    if min_length != DEFAULT_RAND_STR_LEN or max_length != DEFAULT_RAND_STR_LEN:
        if min_length > max_length:
            print("The minimum string length must be less than or equal to maximum string length.")
            exit(1)
        else:
            if enforce_diversity and min_length < min_diverse_str_len:
                print(f"The minimum string length is {min_length} but the current diversity setting require a minimum length of at least {min_diverse_str_len}.")
                exit(1)
            rand_str_len = rand_below((max_length - min_length) + 1) + min_length
            if ruler:
                print_ruler(min_length, max_length)
    else:
        if ruler:
            print_ruler(rand_str_len, rand_str_len)

    # Catch excessive string lengths to avoid abuse of the utility.
    if rand_str_len > MAX_RAND_STR_LEN:
        print(f"The maximum allowed string length is {MAX_RAND_STR_LEN} characters.")
        exit(1)

    # Add special characters to disallow list.
    if also_no_special:
        also_no += gen_special_chr_str()

    # Add numeric characters to disallow list.
    if also_no_numeric:
        also_no += gen_numeric_chr_str()

    # Add lower case letters to disallow list.
    if also_no_lower:
        also_no += gen_lower_chr_str()

    # Add upper disallow list.
    if also_no_upper:
        also_no += gen_upper_chr_str()

    # Aggregate disallow list.
    disallow_list = str_to_unique_char_list(no + also_no)

    # Remove explicitly allowed characters.
    if not allow is None:
        disallow_list = str(set(disallow_list) - set(allow))

    # Warn if diversify-from-allow is set without enforce-diversity
    if diversify_from_allow and not enforce_diversity and not silent:
        print("Warning: --diversify-from-allow was set, but --enforce-diversity was not. The generated string may or may not contain any characters from the allow list.")

    if enforce_diversity:
        print(shuffle_string(gen_random_diverse_str(rand_str_len, disallow_list, no_special=also_no_special, no_lower=also_no_lower, no_upper=also_no_upper, no_numeric=also_no_numeric, allow=allow, diversify_from_allow=diversify_from_allow)))
    else:
        print(shuffle_string(gen_random_str(rand_str_len, disallow_list)))

    exit(0)

def print_ruler(min_length, max_length):
    """
    Outputs a visual display illustrating the allowed string length. Useful for debugging.
    """
    print(('-' * (min_length - 1)) + ('=' * ((max_length - min_length) + 1)))


# Start procedural code
if __name__ == '__main__':
    randomstr()